from time import strftime
timestr = strftime('%Y%m%d-%H%M%S')

nrFrames = 4

h = 450
w = h
x = width()/2 - h/2
y = height()/2 - w/2
a, b, c = 0.7,0.7,0.1
d, e, f = 0,0,0
whatevs = 20

'''
In this scenario, the squares jump corner after a given number of frames.

It is rather abrupt.

It would be nice if we could set the pace. Maybe start with as many steps as there are squares?

Secondly, it would be nice if we could apply interpolation to the number of squares.

Currently, a simple mathematical rule is applied. But ideally, you'd want to set top size, or bottom size, or in-between size, and it calculates the correct sizes for you. 

Thirdly, it would be nice if the squares didn't jump straight to the edge of the corner. We need an offset.

'''

for frame in range(nrFrames):
    newPage()
    frameDuration(1/nrFrames)
    save()
    fill(0.4)
    rect(10,10,width()-20, height()-20)
    restore()
    for i in range(whatevs):
        save()
        if frame < nrFrames * 0.25:
            shadow((-1, -1), 80 * 1 * random(), (d, e, f))
            fill(a, b, c)
            stroke(a, b, c)
            strokeWidth(w/10 * 1 * random())
            rect(x, y, w - i * sqrt(h), h - i * sqrt(h)) #bottomleft
        elif frame < nrFrames * 0.5:    
            shadow((-1, -1), 80 * 1 * random(), (d, e, f))
            fill(a, b, c)
            stroke(a, b, c)
            strokeWidth(w/10 * 1 * random())
            rect(x, y + i * sqrt(h), w - i * sqrt(h), h - i * sqrt(h)) #top left
        elif frame < nrFrames * 0.75:
            shadow((-1, -1), 80 * 1 * random(), (d, e, f))
            fill(a, b, c)
            stroke(a, b, c)
            strokeWidth(w/10 * 1 * random())
            rect(x + i * sqrt(h), y + i * sqrt(h), w - i * sqrt(h), h - i * sqrt(h)) #top right
        #if frame == nrFrame * 0.75:
        else:
            shadow((-1, -1), 80 * 1 * random(), (d, e, f))
            fill(a, b, c)
            stroke(a, b, c)
            strokeWidth(w/10 * 1 * random())
            rect(x + i * sqrt(h), y, w - i * sqrt(h), h - i * sqrt(h)) #bottom right
        restore()

saveImage('squares-2-variant-1-' + timestr + '.gif')
